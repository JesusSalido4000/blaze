# Variables
$solutionName = "SeleniumFramework"
$solutionDir = "$PSScriptRoot\$solutionName"
$projectName = "$solutionName"

# Verificar si ya existe la solución y eliminarla
if (Test-Path $solutionDir) {
    Remove-Item -Recurse -Force $solutionDir
}

# Crear la carpeta de la solución
New-Item -ItemType Directory -Path $solutionDir | Out-Null

# Navegar a la carpeta de la solución
Set-Location -Path $solutionDir

# Crear la solución
dotnet new sln -n $solutionName

# Crear el proyecto principal
dotnet new mstest -n $projectName

# Agregar el proyecto a la solución
dotnet sln add "$projectName\$projectName.csproj"

# Crear carpetas para organización
New-Item -ItemType Directory -Path "$projectName\Pages" | Out-Null
New-Item -ItemType Directory -Path "$projectName\Utilities" | Out-Null
New-Item -ItemType Directory -Path "$projectName\Tests" | Out-Null

# Instalar paquetes de NuGet requeridos
dotnet add "$projectName\$projectName.csproj" package Selenium.WebDriver
dotnet add "$projectName\$projectName.csproj" package Selenium.WebDriver.ChromeDriver
dotnet add "$projectName\$projectName.csproj" package Microsoft.NET.Test.Sdk
dotnet add "$projectName\$projectName.csproj" package MSTest.TestAdapter
dotnet add "$projectName\$projectName.csproj" package MSTest.TestFramework

# Código de las clases
$testCode = @"
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenQA.Selenium;
using SeleniumFramework.Utilities;
using SeleniumFramework.Pages;

namespace SeleniumFramework.Tests
{
    [TestClass]
    public class DemoBlazeTests
    {
        private IWebDriver driver;
        private HomePage homePage;

        [TestInitialize]
        public void SetUp()
        {
            driver = WebDriverFactory.CreateDriver();
            homePage = new HomePage(driver);
            homePage.NavigateTo();
        }

        [TestMethod]
        public void VerifyHomePageTitle()
        {
            string expectedTitle = "STORE";
            string actualTitle = homePage.GetTitle();
            Assert.AreEqual(expectedTitle, actualTitle, "El título de la página de inicio no es el esperado.");
        }

        [TestCleanup]
        public void TearDown()
        {
            driver.Quit();
        }
    }
}
"@
$testCode | Out-File "$projectName\Tests\DemoBlazeTests.cs" -Encoding UTF8

$pageCode = @"
using OpenQA.Selenium;

namespace SeleniumFramework.Pages
{
    public class HomePage
    {
        private readonly IWebDriver driver;
        private readonly string url = "https://www.demoblaze.com";

        public HomePage(IWebDriver driver)
        {
            this.driver = driver;
        }

        public void NavigateTo()
        {
            driver.Navigate().GoToUrl(url);
        }

        public string GetTitle()
        {
            return driver.Title;
        }
    }
}
"@
$pageCode | Out-File "$projectName\Pages\HomePage.cs" -Encoding UTF8

$utilCode = @"
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;

namespace SeleniumFramework.Utilities
{
    public static class WebDriverFactory
    {
        public static IWebDriver CreateDriver()
        {
            var driver = new ChromeDriver();
            driver.Manage().Window.Maximize();
            return driver;
        }
    }
}
"@
$utilCode | Out-File "$projectName\Utilities\WebDriverFactory.cs" -Encoding UTF8

# Mensaje final
Write-Host "La solución '$solutionName' se ha creado correctamente en '$solutionDir'."
Write-Host "Abre Visual Studio y carga la solución para comenzar a trabajar."
